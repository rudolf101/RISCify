.app {
  display: flex;
  flex-direction: row;
  line-height: 1.3;
  min-height: 100vh;
}

.app > .left {
  display: flex;
  flex-direction: column;
  align-items: center;
  flex-grow: 1;
}

.app > .right {
  border-left: 1px solid var(--color-panel);
  display: none;
  width: 20%;
}

.app > .right.show {
  display: block;
}

.app > .right > textarea {
  color: inherit;
  font-family: inherit;
  font-size: inherit;
  background: none;
  outline: none;
  border: none;
  resize: none;
  width: 100%;
  height: 100%;
  padding: 1rem;
  box-sizing: border-box;
}

.header,
.message {
  color: var(--color-instruction);
}

.error {
  color: var(--color-dots);
}

.header {
  font-size: 2rem;
  margin-top: 8rem;
}

.message {
  font-size: 1.5rem;
}

.code {
  display: grid;
  grid-template-columns: repeat(4, max-content);
  column-gap: 1rem;
}

.arrows {
  grid-row: 1/-1;
  color: var(--color-jump);
}

.offsets {
  display: grid;
  grid-row: 1/-1;
  grid-template-rows: subgrid;
  color: var(--color-comment);
}

.encoded {
  display: grid;
  grid-row: 1/-1;
  grid-template-rows: subgrid;
  color: var(--color-hex);
  text-align: right;
}

.decoded {
  position: relative;
  display: grid;
  grid-column: span 2;
  grid-row: 1/-1;
  grid-template-rows: subgrid;
  grid-template-columns: subgrid;
  gap: 0 1rem;
}

.decoded > .instruction {
  display: grid;
  grid-column: span 2;
  grid-template-columns: subgrid;
}

.decoded > .instruction > .variants {
  outline: 1px solid var(--color-entity);
  margin-top: 1px;
  display: grid;
  grid-column: span 2;
  grid-template-columns: subgrid;
}

.decoded > .instruction > .mnemonic,
.decoded > .instruction > .variants > .mnemonic {
  color: var(--color-instruction);
  display: flex;
}

.decoded > .instruction > .variants > .mnemonic {
  cursor: pointer;
}

.decoded > .instruction > .mnemonic > .ellipsis {
  flex: 1;
  cursor: pointer;
}

.decoded > .instruction > .mnemonic > .ellipsis::before {
  content: "â€¦";
  color: var(--color-dots);
  cursor: pointer;
}

.decoded > .instruction > .error {
  color: var(--color-dots);
}

.decoded span.entity {
  color: var(--color-entity);
}

.decoded span.const {
  color: var(--color-constant);
}

.decoded span.jump {
  color: var(--color-special);
}

.spanning span:not(.selected),
.mnemonic.spanning {
  color: var(--color-comment);
}

.tools {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0.5rem 1.5rem;
  color: var(--color-panel);
  border: 1px solid var(--color-panel);
  padding: 0.3125rem 0.5rem;
  margin: 3rem 0;

  position: sticky;
  top: 1rem;
  background-color: var(--color-bg);
  z-index: 1;
}

.tool {
  display: flex;
  flex-direction: row;
  gap: 0.5rem;
  align-items: center;
}

.tool > input {
  background-color: transparent;
  border: 1px solid var(--color-panel);
  color: inherit;
  outline: none;
  font: inherit;
  width: 2em;
}

.tool > button {
  background-color: transparent;
  border: 1px solid var(--color-panel);
  color: inherit;
  outline: none;
  font: inherit;
  cursor: pointer;
}

.tool > button:focus {
  border-color: var(--color-focus);
  color: var(--color-focus);
}

.tool > button.selected {
  background-color: var(--color-panel);
  color: var(--color-bg);
}

.tool > button.selected:focus {
  background-color: var(--color-focus);
}

.switch {
  border: 1px solid var(--color-panel);
}

.switch > * {
  display: inline-block;
  margin: 1px;
  padding: 0 2px;
  cursor: pointer;
}

.switch > .selected {
  background-color: var(--color-panel);
  color: var(--color-bg);
}

.switch > *:focus-within {
  background-color: var(--color-focus);
  color: var(--color-bg);
}

.switch > * > input[type=radio] {
  width: 0;
  margin: 0;
  outline: none;
}