- input:
    13 03 a0 00 93 03 e0 01 33 84 63 40
  output:
    addi x6, x0, 10
    addi x7, x0, 30
    sub x8, x7, x6
  explanation:
    each byte in
      13 03 a0 00 93 03 e0 01 33 84 63 40
    is written in little-endian
      13 -> 00010011 -> 11001000
      03 -> 00000011 -> 11000000
      a0 -> 10100000 -> 00000101
      00 -> 00000000 -> 00000000
      ...
    then those bits are split into bit-seqs for instructions:
      11001000110000000000010100000000
      11001001110000000000011110000000
      11001100001000011100011000000010
    then those instructions are disassembled:
      11'00100'01100'000'00000'010100000000  -> addi x6, x0, 10
      11'00100'11100'000'00000'011110000000  -> addi x7, x0, 30
      11'00110'00010'000'11100'01100'0000010 -> sub x8, x7, x6
- input:
    b3 62 73 00 13 c5 f5 ff 33 05 55 00
  output:
    or x5, x6, x7
    xori x10, x11, -1
    add x10, x10, x5
- input:
    37 03 00 40
    93 02 00 00
    63 00 03 02
    b3 e3 62 00
    93 d2 12 00
    63 46 75 00
    33 05 75 40
    b3 e2 62 00
    13 53 23 00
    6f f0 5f fe
    13 85 02 00
  output:
    lui x6, 262144
    addi x5, x0, 0
    beq x6, x0, 32
    or x7, x5, x6
    srli x5, x5, 1
    blt x10, x7, 12 | bgt x7, x10, 12
    sub x10, x10, x7
    or x5, x5, x6
    srli x6, x6, 2
    jal x0, -28 | j -28
    addi x10, x5, 0
